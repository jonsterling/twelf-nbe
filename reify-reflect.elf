reflect : sem -> sem -> sem -> type.
%mode reflect +D1 +D2 -D3.

reify : sem -> sem -> sem -> type.
%mode reify +D1 +D2 -D3.

- : reflect 1 K •.
- : reflect (Σ A B) K (M , N)
     <- reflect A (π₁ K) M
     <- reflect (B M) (π₂ K) N.
- : reflect (Π A B) K (λ E)
     <- ({x} reify A x (N x))
     <- ({x} reflect (B x) (K $ N x) (E x)).

- : reify 1 D •.
- : reify (Σ A B) D (M , N)
     <- π₂ D ⇒ D2
     <- π₁ D ⇒ D1
     <- reify A D1 M
     <- reify (B M) D2 N.
- : reify (Π A B) D (λ E)
     <- ({x} reflect A x (RA x))
     <- ({x} D $ (RA x) ⇒ (DRA x))
     <- ({x} (reify (B (RA x)) (DRA x) (E x))).

%worlds (var-sem) (reify _ _ _) (reflect _ _ _).

reify-ty : sem -> sem -> type.
%mode reify-ty +D1 -D2.

- : reify-ty 1 1.
- : reify-ty (Π A B) (Π A' B')
     <- ({x} reflect A x (RA x))
     <- ({x} reify-ty (B (RA x)) (B' x))
     <- reify-ty A A'.
- : reify-ty (Σ A B) (Σ A' B')
     <- ({x} reflect A x (RA x))
     <- ({x} reify-ty (B (RA x)) (B' x))
     <- reify-ty A A'.

%worlds (var-sem) (reify-ty _ _).