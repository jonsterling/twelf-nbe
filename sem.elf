sem : type.

%block var-sem : block {x:sem}.

1 : sem.
• : sem.

Σ : sem -> (sem -> sem) -> sem.
, : sem -> sem -> sem. %infix right 11 ,.
π₁ : sem -> sem. %prefix 10 π₁.
π₂ : sem -> sem. %prefix 10 π₂.

Π : sem -> (sem -> sem) -> sem.
λ : (sem -> sem) -> sem.
$ : sem -> sem -> sem. %infix left 10 $.

⇒ : sem -> sem -> type. %infix right 9 ⇒.
%mode ⇒ +M -N.

canonicity : type.
can : canonicity.
neu : canonicity.

neutral : sem -> type.
%mode neutral +M.

neutral/π₁ : neutral (π₁ R)
              <- neutral R.
neutral/π₂ : neutral (π₂ R)
              <- neutral R.
neutral/$ : neutral (R $ M)
             <- neutral R.

⇒/1 : 1 ⇒ 1.
⇒/• : • ⇒ •.
⇒/Σ : Σ A B ⇒ Σ A B.
⇒/, : M , N ⇒ M , N.
⇒/π₁ : π₁ MN ⇒ M'
        <- MN ⇒ (M , N)
        <- M ⇒ M'.
⇒/π₁/ne : π₁ R ⇒ π₁ R'
           <- R ⇒ R'
           <- neutral R'.

⇒/π₂ : π₂ MN ⇒ N'
        <- MN ⇒ (M , N)
        <- M ⇒ N'.
⇒/π₂/ne : π₂ R ⇒ π₂ R'
           <- R ⇒ R'
           <- neutral R'.

⇒/Π : Π A B ⇒ Π A B.
⇒/λ : λ E ⇒ λ E.

⇒/$ : M $ N ⇒ O
       <- M ⇒ λ E
       <- E N ⇒ O.
⇒/$/ne : R $ N ⇒ R' $ N
          <- R ⇒ R'
          <- neutral R.

%block var-eval : block {x:sem}{_:x ⇒ x}{_:neutral x}.
%worlds (var-eval) (neutral _) (⇒ _ _).

%define result = Z
%solve - : (λ [x] (λ [z] z) $ x) ⇒ Z.